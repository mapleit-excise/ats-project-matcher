// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId          Int      @id @default(autoincrement())
  username        String   @unique
  password        String
  employeeId      Int
  updatedUserId   Int?
  updatedDateTime DateTime @default(now())

  Project            Project[]
  Skill              Skill[]
  Title              Title[]
  Position           Position[]
  Level              Level[]
  Employee           Employee[]
  Customer           Customer[]
  EmployeeSkill      EmployeeSkill[]
  ProjectPosition    ProjectPosition[]
  ProjectCoordinator ProjectCoordinator[]
  ProjectAssignment  ProjectAssignment[]
}

model Skill {
  skillId         Int      @id @default(autoincrement())
  skillName       String   @unique
  skillDesc       String
  updatedUserId   Int?
  updatedDateTime DateTime @default(now())

  updatedUser User? @relation(fields: [updatedUserId], references: [userId])

  EmployeeSkill EmployeeSkill[]
  ProjectSkill  ProjectSkill[]
}

model Title {
  titleId         Int      @id @default(autoincrement())
  titleName       String
  updatedUserId   Int?
  updatedDateTime DateTime @default(now())

  updatedUser User?      @relation(fields: [updatedUserId], references: [userId])
  Employee    Employee[]
}

model Position {
  positionId      Int      @id @default(autoincrement())
  positionName    String
  updatedUserId   Int?
  updatedDateTime DateTime @default(now())

  updatedUser       User?               @relation(fields: [updatedUserId], references: [userId])
  Employee          Employee[]
  ProjectPosition   ProjectPosition[]
  ProjectAssignment ProjectAssignment[]
}

model Level {
  levelId         Int      @id @default(autoincrement())
  levelName       String   @unique
  levelDesc       String
  updatedUserId   Int?
  updatedDateTime DateTime @default(now())

  updatedUser     User?             @relation(fields: [updatedUserId], references: [userId])
  Employee        Employee[]
  ProjectPosition ProjectPosition[]
}

model EmployeeSkill {
  employeeId      Int
  skillId         Int
  updatedUserId   Int?
  updatedDateTime DateTime @default(now())

  employee    Employee @relation(fields: [employeeId], references: [employeeId])
  skill       Skill    @relation(fields: [skillId], references: [skillId])
  updatedUser User?    @relation(fields: [updatedUserId], references: [userId])

  @@id([employeeId, skillId])
}

model Employee {
  employeeId       Int      @id @default(autoincrement())
  titleId          Int
  name             String
  surname          String
  birthDate        DateTime
  beginWorkingDate DateTime
  positionId       Int
  levelId          Int
  salary           Float
  email            String
  updatedUserId    Int?
  updatedDateTime  DateTime @default(now())

  title             Title               @relation(fields: [titleId], references: [titleId])
  position          Position            @relation(fields: [positionId], references: [positionId])
  level             Level               @relation(fields: [levelId], references: [levelId])
  updatedUser       User?               @relation(fields: [updatedUserId], references: [userId])
  EmployeeSkill     EmployeeSkill[]
  ProjectAssignment ProjectAssignment[]
}

model Project {
  projectId        Int           @id @default(autoincrement())
  projectName      String
  projectDesc      String?
  customerId       Int
  projectStartDate DateTime
  projectEndDate   DateTime
  totalBudget      Float
  projectStatus    ProjectStatus
  size             ProjectSize
  updatedUserId    Int
  updatedDateTime  DateTime      @default(now())

  customer           Customer             @relation(fields: [customerId], references: [customerId])
  updatedUser        User                 @relation(fields: [updatedUserId], references: [userId])
  ProjectPosition    ProjectPosition[]
  ProjectSkill       ProjectSkill[]
  ProjectCoordinator ProjectCoordinator[]
  ProjectAssignment  ProjectAssignment[]
}

model ProjectPosition {
  projectPosId    Int      @id @default(autoincrement())
  projectId       Int
  positionId      Int
  levelId         Int
  budget          Float
  nPerson         Int
  updatedUserId   Int
  updatedDateTime DateTime @default(now())

  project     Project  @relation(fields: [projectId], references: [projectId])
  position    Position @relation(fields: [positionId], references: [positionId])
  level       Level    @relation(fields: [levelId], references: [levelId])
  updatedUser User     @relation(fields: [updatedUserId], references: [userId])
}

model ProjectSkill {
  projectSkillId Int @id @default(autoincrement())
  projectId      Int
  skillId        Int

  project Project @relation(fields: [projectId], references: [projectId])
  skill   Skill   @relation(fields: [skillId], references: [skillId])
}

model Customer {
  customerId      Int      @id @default(autoincrement())
  customerName    String
  address         String
  updatedUserId   Int?
  updatedDateTime DateTime @default(now())

  updatedUser User?     @relation(fields: [updatedUserId], references: [userId])
  Project     Project[]
}

model ProjectCoordinator {
  projectCoId     Int      @id @default(autoincrement())
  name            String
  tel             String
  email           String
  projectId       Int
  updatedUserId   Int?
  updatedDateTime DateTime @default(now())

  project     Project @relation(fields: [projectId], references: [projectId])
  updatedUser User?   @relation(fields: [updatedUserId], references: [userId])
}

model ProjectAssignment {
  projectAssignmentId Int           @id @default(autoincrement())
  projectId           Int
  employeeId          Int
  positionId          Int
  contactStartDate    DateTime
  contactEndDate      DateTime
  salary              Float
  status              ProjectStatus
  updatedUserId       Int?
  updatedDateTime     DateTime      @default(now())

  project     Project  @relation(fields: [projectId], references: [projectId])
  employee    Employee @relation(fields: [employeeId], references: [employeeId])
  position    Position @relation(fields: [positionId], references: [positionId])
  updatedUser User?    @relation(fields: [updatedUserId], references: [userId])
}

enum ProjectStatus {
  I
  X
}

enum ProjectSize {
  S
  M
  L
  XL
  XXL
}
